{"version":3,"sources":["components/TableCells.js","components/TableRows.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["TableCells","Component","TableRows","props","fillwithCols","allcols","i","cols","push","rows","this","Table","Rows","allrows","App","addRow","state","fixRows","setState","addCol","fixCols","removeRow","removeCol","fillAU","fillAll","clear","className","onClick","addcol","onChange","value","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wOAUeA,G,6KANP,OACQ,qC,GAHSC,cCqBVC,E,kDAnBX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAEVC,aAAe,WAEX,IADA,IAAIC,EAAU,GACNC,EAAI,EAAGA,EAAE,EAAKH,MAAMI,KAAMD,IAC9BD,EAAQG,KAAK,kBAAC,EAAD,CAAYC,KAAM,EAAKN,MAAMI,QAE9C,OAAOF,GARO,E,qDAWd,OACQ,4BACKK,KAAKN,oB,GAdFH,aCqBTU,E,kDApBX,WAAYR,GAAO,IAAD,8BACd,cAAMA,IAEVS,KAAO,WAEH,IADA,IAAIC,EAAS,GACLP,EAAI,EAAGA,EAAE,EAAKH,MAAMM,KAAMH,IAC9BO,EAAQL,KAAK,kBAAC,EAAD,CAAWD,KAAQ,EAAKJ,MAAMI,QAE/C,OAAOM,GARO,E,qDAWd,OACA,+BACI,+BACCH,KAAKE,a,GAfEX,aCoELa,E,kDAlEb,aAAc,IAAD,8BACX,gBAOFC,OAAS,WAAK,MACO,EAAKC,MAAnBP,EADO,EACPA,KAAMF,EADC,EACDA,KACPU,EAAUR,EAAO,EACR,IAATF,EACF,EAAKW,SAAS,CAAET,KAAMQ,EAASV,KAAMA,EAAO,IAE5C,EAAKW,SAAS,CAACT,KAAMQ,KAdZ,EAmBbE,OAAS,WAAM,MACM,EAAKH,MAAnBP,EADQ,EACRA,KACDW,EAFS,EACFb,KACU,EACR,IAATE,EACF,EAAKS,SAAS,CAACX,KAAKa,EAASX,KAAKA,EAAO,IAEzC,EAAKS,SAAS,CAACX,KAAKa,KAzBX,EA4BbC,UAAY,WACV,EAAKH,SAAS,CAACT,KAAM,EAAKO,MAAMP,KAAK,KA7B1B,EA+Bba,UAAY,WACV,EAAKJ,SAAS,CAACX,KAAM,EAAKS,MAAMT,KAAK,KAhC1B,EAkCbgB,OAAS,aAlCI,EAqCbC,QAAU,aArCG,EAyCbC,MAAQ,aAvCN,EAAKT,MAAM,CACTP,KAAM,EACNF,KAAM,GAJG,E,qDA4CX,OACE,yBAAKmB,UAAU,OACb,4BAAQA,UAAU,SAASC,QAASjB,KAAKK,QAAzC,WACA,4BAAQW,UAAU,SAASC,QAASjB,KAAKS,QAAzC,WACA,4BAAQO,UAAU,YAAYC,QAASjB,KAAKW,WAA5C,cACA,4BAAQK,UAAU,YAAYC,QAASjB,KAAKkB,QAA5C,cACA,4BAAQF,UAAU,mBAAmBC,QAAQ,IAA7C,sBACA,4BAAQD,UAAU,UAAUC,QAAQ,IAApC,YACA,4BAAQD,UAAU,QAAQC,QAAQ,IAAlC,SACA,4BAAQE,SAAS,IACf,0CACA,4BAAQC,MAAM,OAAd,OACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,UAAd,WAEF,kBAAC,EAAD,CAAOrB,KAAMC,KAAKM,MAAMP,KAAMF,KAAMG,KAAKM,MAAMT,Y,GA7DrCN,aCQE8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.66f8fa16.chunk.js","sourcesContent":["import React,{ Component } from \"react\"\n\nclass TableCells extends Component{//returns a td  for the columns\n    render(){\n        return(\n                <td> </td>\n        )\n    }\n}\n\nexport default TableCells;","import React, { Component } from 'react';\nimport TableCells from './TableCells'\n\nclass TableRows extends Component{\n    constructor(props){\n        super(props);\n    }\n    fillwithCols = () => {\n        let allcols = [];\n        for(let i = 0; i<this.props.cols; i++){\n            allcols.push(<TableCells rows={this.props.cols} />)//when a tr is generated makes call to create the td for the cols/cells\n        }\n        return allcols;\n    }\n    render(){\n        return(\n                <tr>\n                    {this.fillwithCols()}\n                </tr>\n        )\n    }\n}\n\nexport default TableRows;","import React, { Component } from 'react';\nimport TableRows from './TableRows';\n\nclass Table extends Component{\n    constructor(props){\n        super(props);\n    }\n    Rows = () => {\n        let allrows =[];\n        for(let i = 0; i<this.props.rows; i++){\n            allrows.push(<TableRows cols = {this.props.cols} />);//for the amount of rows apparent it will call the table rows that will make a new tr\n        }\n        return allrows;\n    }\n    render(){\n        return(\n        <table>\n            <tbody>\n            {this.Rows()}\n            </tbody>\n        </table>)\n    }\n}\n\nexport default Table;","import React, { Component } from 'react';\nimport './App.css';\nimport {Table} from './components'\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state={\n      rows: 0,\n      cols: 0,\n    }\n  }\n\n  addRow = () =>{ //adds to track of rows apparent to number of clicks.\n    let {rows, cols} = this.state;\n    let fixRows = rows + 1;//fixed if cols has one to create a td if rows has none\n    if (cols === 0) {\n      this.setState({ rows: fixRows, cols: cols + 1});\n    } else {\n      this.setState({rows: fixRows});//if already is col will create same amount of cols for each.\n    }\n  }\n\n\n  addCol = () => {//adds to track of cols apprent to number of clicks\n    let {rows, cols} = this.state;\n    let fixCols = cols + 1;\n    if (rows === 0) {\n      this.setState({cols:fixCols, rows:rows + 1});//fixed if the user clicks cols first and there is no tr which is needed first to generate cell.\n    } else {\n      this.setState({cols:fixCols});//if there already is a fixed amount of rows it will create a col for each row\n    }\n  }\n  removeRow = () =>{\n    this.setState({rows: this.state.rows-1})\n  }\n  removeCol = () => {\n    this.setState({cols: this.state.cols-1})\n  }\n  fillAU = () => {\n\n  }\n  fillAll = () =>{\n\n  }\n\n  clear = () =>{}\n\n  render(){\n    return(\n      <div className=\"App\">\n        <button className=\"addRow\" onClick={this.addRow}>Add Row</button>\n        <button className=\"addCol\" onClick={this.addCol}>Add Col</button>\n        <button className=\"removeRow\" onClick={this.removeRow}>Remove Row</button>\n        <button className=\"removeCol\" onClick={this.addcol}>Remove Col</button>\n        <button className=\"fillAllUncolered\" onClick=\"\">Fill All Uncolored</button>\n        <button className=\"fillAll\" onClick=\"\">Fill All</button>\n        <button className=\"clear\" onClick=\"\">Clear</button>\n        <select onChange=\"\">\n          <option>Select</option>\n          <option value=\"Red\">Red</option>\n          <option value=\"Green\">Green</option>\n          <option value=\"Blue\">Blue</option>\n          <option value=\"Yellow\">Yellow</option>\n        </select>\n        <Table rows={this.state.rows} cols={this.state.cols}></Table>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
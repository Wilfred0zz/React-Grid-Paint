{"version":3,"sources":["components/Table.js","App.js","serviceWorker.js","index.js"],"names":["Table","rows","cols","setColor","startColoring","stopColoring","Array","from","style","backgroundColor","onMouseOver","cell","onMouseDown","onMouseUp","App","addRow","state","fixRows","setState","addCol","fixCols","removeRow","alert","removeCol","fillAU","table","ReactDOM","findDOMNode","childNodes","i","j","color","fillAll","clear","selectColor","selection","target","value","mouseDown","className","onClick","this","onChange","Component","Boolean","window","location","hostname","match","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.756064ef.chunk.js","sourcesContent":["import React from \"react\";\n\n//Props for table\nconst Table = ({\n    rows,\n    cols,\n    setColor,\n    startColoring,\n    stopColoring\n}) => \n{\n    //Generates table adding rows/cols accordingly. \n    //Each cell is created with color set to white and eventlisteners\n    return (\n        <table>\n            <tbody>\n            {Array.from(Array(rows), () => {\n                return (\n                    <tr>\n                        {Array.from(Array(cols), () => {\n                            return (\n                                <td \n                                style={{backgroundColor: 'white'}}\n                                onMouseOver={(cell) => setColor(cell)}\n                                onMouseDown={(cell) => startColoring(cell)}\n                                onMouseUp={(cell) => stopColoring(cell)}\n                                ></td>\n                            )\n                        })}\n                    </tr>\n                )\n            })}\n            </tbody>\n        </table>\n    );\n}\n\nexport default Table;\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport Table from './components/Table'\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state={\n      rows: 0,\n      cols: 0,\n      color: 'white',\n      mouseDown: false\n    }\n  }\n\n  addRow = () =>{ //adds to track of rows apparent to number of clicks.\n    let {rows, cols} = this.state;\n    let fixRows = rows + 1;//fixed if cols has one to create a td if rows has none\n    if (cols === 0) {\n      this.setState({ rows: fixRows, cols: cols + 1});\n    } else {\n      this.setState({rows: fixRows});//if already is col will create same amount of cols for each.\n    }\n  }\n\n\n  addCol = () => {//adds to track of cols apprent to number of clicks\n    let {rows, cols} = this.state;\n    let fixCols = cols + 1;\n    if (rows === 0) {\n      this.setState({cols:fixCols, rows:rows + 1});//fixed if the user clicks cols first and there is no tr which is needed first to generate cell.\n    } else {\n      this.setState({cols:fixCols});//if there already is a fixed amount of rows it will create a col for each row\n    }\n  }\n\n  //Removes rows\n  removeRow = () => {\n    //If there are no rows, alert user\n    if (this.state.rows === 0)\n      alert(\"No rows to remove\")\n    //If this is the last row to remove, reset to empty table\n    else if (this.state.rows === 1)\n      this.setState({ rows: 0, cols: 0 })\n    else\n      this.setState({ rows: this.state.rows - 1 })\n  }\n\n  removeCol = () => {\n    //If there are no columns, alert user\n    if (this.state.cols === 0)\n      alert(\"No columns to remove\")\n    //If this is the last column to remove, reset to empty table\n    else if (this.state.cols === 1)\n      this.setState({ rows: 0, cols: 0 })\n    else\n      this.setState({ cols: this.state.cols - 1 })\n  }\n\n  //Uses ReactDOM to select the table, then tablebody, and the tr's contained within it.\n  //Then iterates through each row and its cells, checking if their color is white\n  //If it is white, we replace it with the currently selected color.\n  fillAU = () => {\n    let table = ReactDOM.findDOMNode(this).childNodes[8].childNodes[0].childNodes;\n    for(let i = 0; i < this.state.rows; i++){\n      for(let j = 0; j < this.state.cols; j++){\n        if(table[i].childNodes[j].style.backgroundColor === \"white\")\n        table[i].childNodes[j].style.backgroundColor = this.state.color;\n      }\n    }\n  }\n\n  //Sets color of all cells to the selected color\n  fillAll = () =>{\n    let table = ReactDOM.findDOMNode(this).childNodes[8].childNodes[0].childNodes;\n    for(let i = 0; i < this.state.rows; i++){\n      for(let j = 0; j < this.state.cols; j++)\n        table[i].childNodes[j].style.backgroundColor = this.state.color;\n    }\n  }\n\n  //Sets color of all cells to white\n  clear = () =>{\n    let table = ReactDOM.findDOMNode(this).childNodes[8].childNodes[0].childNodes;\n    for(let i = 0; i < this.state.rows; i++){\n      for(let j = 0; j < this.state.cols; j++)\n        table[i].childNodes[j].style.backgroundColor = \"white\";\n    }\n  }\n\n  //Sets the color to the passed event target's value.\n  selectColor = (selection) => {\n    this.setState({ color: selection.target.value })\n  }\n\n  //When the mouse is clicked and held, colors the clicked cell\n  startColoring = (cell) => {\n    this.setState({ mouseDown: true })\n    cell.target.style.backgroundColor = this.state.color;\n  }\n\n  //Stops coloring hovered cells once mouse is no longer held down\n  stopColoring = (cell) => {\n    this.setState({ mouseDown: false })\n  }\n\n  //If the mouse is held down, color any hovered cells.\n  setColor = (cell) => {\n    if (this.state.mouseDown === true)\n        cell.target.style.backgroundColor = this.state.color;\n  }\n\n\n  //Generate the buttons and dropdown menu\n  //Pass states and functions from App component to Table\n  render(){\n    return(\n      <div className=\"App\">\n        <button className=\"addRow\" onClick={this.addRow}>Add Row</button>\n        <button className=\"addCol\" onClick={this.addCol}>Add Col</button>\n        <button className=\"removeRow\" onClick={this.removeRow}>Remove Row</button>\n        <button className=\"removeCol\" onClick={this.removeCol}>Remove Col</button>\n        <button className=\"fillAllUncolered\" onClick={this.fillAU}>Fill All Uncolored</button>\n        <button className=\"fillAll\" onClick={this.fillAll}>Fill All</button>\n        <button className=\"clear\" onClick={this.clear}>Clear</button>\n        <select onChange={this.selectColor}>\n          <option>Select</option>\n          <option value=\"Red\">Red</option>\n          <option value=\"Green\">Green</option>\n          <option value=\"Blue\">Blue</option>\n          <option value=\"Yellow\">Yellow</option>\n        </select>\n        <Table rows={this.state.rows} \n            cols={this.state.cols}\n            color={this.state.color}\n            startColoring={this.startColoring}\n            stopColoring={this.stopColoring}\n            setColor={this.setColor}\n            />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}